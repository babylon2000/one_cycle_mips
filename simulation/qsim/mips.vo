// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 18.0.0 Build 614 04/24/2018 SJ Standard Edition"

// DATE "03/03/2019 23:02:10"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module oor (
	a,
	b,
	c);
input 	[3:0] a;
input 	[3:0] b;
output 	[3:0] c;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \c[0]~output_o ;
wire \c[1]~output_o ;
wire \c[2]~output_o ;
wire \c[3]~output_o ;
wire \a[0]~input_o ;
wire \b[0]~input_o ;
wire \c~0_combout ;
wire \a[1]~input_o ;
wire \b[1]~input_o ;
wire \c~1_combout ;
wire \a[2]~input_o ;
wire \b[2]~input_o ;
wire \c~2_combout ;
wire \a[3]~input_o ;
wire \b[3]~input_o ;
wire \c~3_combout ;


cycloneive_io_obuf \c[0]~output (
	.i(\c~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\c[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \c[0]~output .bus_hold = "false";
defparam \c[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \c[1]~output (
	.i(\c~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\c[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \c[1]~output .bus_hold = "false";
defparam \c[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \c[2]~output (
	.i(\c~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\c[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \c[2]~output .bus_hold = "false";
defparam \c[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \c[3]~output (
	.i(\c~3_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\c[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \c[3]~output .bus_hold = "false";
defparam \c[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \a[0]~input (
	.i(a[0]),
	.ibar(gnd),
	.o(\a[0]~input_o ));
// synopsys translate_off
defparam \a[0]~input .bus_hold = "false";
defparam \a[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \b[0]~input (
	.i(b[0]),
	.ibar(gnd),
	.o(\b[0]~input_o ));
// synopsys translate_off
defparam \b[0]~input .bus_hold = "false";
defparam \b[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \c~0 (
// Equation(s):
// \c~0_combout  = (\a[0]~input_o ) # (\b[0]~input_o )

	.dataa(\a[0]~input_o ),
	.datab(\b[0]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\c~0_combout ),
	.cout());
// synopsys translate_off
defparam \c~0 .lut_mask = 16'hEEEE;
defparam \c~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \a[1]~input (
	.i(a[1]),
	.ibar(gnd),
	.o(\a[1]~input_o ));
// synopsys translate_off
defparam \a[1]~input .bus_hold = "false";
defparam \a[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \b[1]~input (
	.i(b[1]),
	.ibar(gnd),
	.o(\b[1]~input_o ));
// synopsys translate_off
defparam \b[1]~input .bus_hold = "false";
defparam \b[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \c~1 (
// Equation(s):
// \c~1_combout  = (\a[1]~input_o ) # (\b[1]~input_o )

	.dataa(\a[1]~input_o ),
	.datab(\b[1]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\c~1_combout ),
	.cout());
// synopsys translate_off
defparam \c~1 .lut_mask = 16'hEEEE;
defparam \c~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \a[2]~input (
	.i(a[2]),
	.ibar(gnd),
	.o(\a[2]~input_o ));
// synopsys translate_off
defparam \a[2]~input .bus_hold = "false";
defparam \a[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \b[2]~input (
	.i(b[2]),
	.ibar(gnd),
	.o(\b[2]~input_o ));
// synopsys translate_off
defparam \b[2]~input .bus_hold = "false";
defparam \b[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \c~2 (
// Equation(s):
// \c~2_combout  = (\a[2]~input_o ) # (\b[2]~input_o )

	.dataa(\a[2]~input_o ),
	.datab(\b[2]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\c~2_combout ),
	.cout());
// synopsys translate_off
defparam \c~2 .lut_mask = 16'hEEEE;
defparam \c~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \a[3]~input (
	.i(a[3]),
	.ibar(gnd),
	.o(\a[3]~input_o ));
// synopsys translate_off
defparam \a[3]~input .bus_hold = "false";
defparam \a[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \b[3]~input (
	.i(b[3]),
	.ibar(gnd),
	.o(\b[3]~input_o ));
// synopsys translate_off
defparam \b[3]~input .bus_hold = "false";
defparam \b[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \c~3 (
// Equation(s):
// \c~3_combout  = (\a[3]~input_o ) # (\b[3]~input_o )

	.dataa(\a[3]~input_o ),
	.datab(\b[3]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.cin(gnd),
	.combout(\c~3_combout ),
	.cout());
// synopsys translate_off
defparam \c~3 .lut_mask = 16'hEEEE;
defparam \c~3 .sum_lutc_input = "datac";
// synopsys translate_on

assign c[0] = \c[0]~output_o ;

assign c[1] = \c[1]~output_o ;

assign c[2] = \c[2]~output_o ;

assign c[3] = \c[3]~output_o ;

endmodule
